#!/usr/bin/env python
import os
import sys
import getopt
import posixpath
from mako.lexer import Lexer
from mako.template import Template
from mako.lookup import TemplateCollection

import mearie.cache
import mearie.runtime

class CustomLookup(TemplateCollection):
    def __init__(self, base, **template_args):
        TemplateCollection.__init__(self)
        self.base = base
        self.template_args = template_args

    def preprocess(self, data):
        data = '<%namespace name="m" file="/res/library.tmpl.html"/>\\\n' + data
        if '<%inherit' not in data:
            # note: topmost template should contain <%doc><%inherit file=""/></%doc>
            data = '<%inherit file="default.tmpl.html"/>\\\n' + data
        return data

    def get_template(self, uri):
        return Template(uri=uri, filename=self.convert_to_path(uri), lookup=self,
                module_filename=None, preprocessor=self.preprocess, **self.template_args)

    def make_template(self, uri, data):
        return Template(uri=uri, filename=self.convert_to_path(uri), text=data, lookup=self,
                module_filename=None, preprocessor=self.preprocess, **self.template_args)

    def filename_to_uri(self, uri, filename):
        raise NotImplementedError

    def adjust_uri(self, uri, relativeto):
        relativeto = relativeto.replace(os.sep, '/') # always use POSIX path
        if uri.startswith('/'):
            return uri
        else:
            if relativeto is not None:
                return posixpath.join(posixpath.dirname(relativeto), uri)
            else:
                return '/' + uri

    def convert_to_path(self, uri):
        uri = uri.replace(os.sep, '/') # always use POSIX path
        path = posixpath.normpath(posixpath.join(self.base, uri.lstrip('/')))
        if path.endswith('.tmpl.html'):
            # for *.tmpl.html, find the first matching path from parents
            dir, name = posixpath.split(path)
            while dir not in ('', '/') and not os.access(path, os.R_OK):
                dir = posixpath.split(dir)[0]
                path = posixpath.join(dir, name)
        return path

def calculate_deps(lookup, filename, cache):
    pending = set([lookup.convert_to_path(filename)])
    result = set()
    while pending:
        filename = pending.pop()
        if filename not in cache:
            tmpl = lookup.get_template(filename)
            lexer = Lexer(file(tmpl.filename).read(), tmpl.filename,
                          disable_unicode=tmpl.disable_unicode,
                          input_encoding=tmpl.input_encoding,
                          preprocessor=tmpl.preprocessor)
            node = lexer.parse()
            class visitor(object):
                def __init__(self, deps): self.deps = deps
                def visitIncludeTag(self, tag): self.deps.add(tag.attributes['file'])
                def visitInheritTag(self, tag): self.deps.add(tag.attributes['file'])
                def visitNamespaceTag(self, tag):
                    if 'file' in tag.attributes: self.deps.add(tag.attributes['file'])
            deps = set()
            node.accept_visitor(visitor(deps))
            deps = set(lookup.convert_to_path(lookup.adjust_uri(dep, filename)) for dep in deps)
            cache[filename] = deps
        deps = cache[filename]
        pending.update(deps - result)
        result.update(deps)
    return result

def main(argv):
    try:
        opts, args = getopt.gnu_getopt(argv, 'c:o:b:D',
                ['cache-dir=', 'output=', 'base=', 'print-dependency'])
    except getopt.GetoptError, e:
        print >>sys.stderr, str(e)
        return 1

    outpath = None
    basepath = os.getcwd()
    cachedir = None
    printdeps = False
    for o, a in opts:
        if o in ('-c', '--cache-dir'):
            cachedir = a
        elif o in ('-o', '--output'):
            outpath = a
        elif o in ('-b', '--base'):
            basepath = a
        elif o in ('-D', '--print-dependency'):
            printdeps = True
        else:
            assert False

    rtsyms = [i for i in dir(mearie.runtime) if not i.startswith('_')]
    lookup = CustomLookup(base=basepath,
            input_encoding='utf-8', output_encoding='utf-8', format_exceptions=False,
            imports=['from mearie.runtime import %s' % ','.join(rtsyms)])
    if printdeps:
        if outpath or cachedir:
            print >>sys.stderr, 'Error: --print-dependency cannot be used together '\
                                'with --output or --cache-dir options.'
            return 1
        cache = {}
        if args and args[0] != '-':
            input = file(args[0])
        else:
            input = sys.stdin
        for line in input:
            line = line.rstrip('\r\n')
            if not line: continue
            src, dest = line.split('\t')
            deps = calculate_deps(lookup, src, cache)
            if deps: print '%s: %s' % (dest, ' '.join(deps))
    else:
        if cachedir: mearie.cache.CACHEDIR = cachedir
        tmpl = lookup.get_template(args[0])
        result = tmpl.render(topmost=tmpl).strip('\r\n')
        if outpath is None:
            sys.stdout.write(result)
        else:
            open(outpath, 'wb').write(result)

    return 0

if __name__ == '__main__':
    raise SystemExit(main(sys.argv[1:]))

