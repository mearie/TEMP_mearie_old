#!/usr/bin/env python
import os
import sys
import getopt
import posixpath
from mako.template import Template
from mako.lookup import TemplateCollection

import mearie.cache
import mearie.runtime

class CustomLookup(TemplateCollection):
    def __init__(self, base, **template_args):
        TemplateCollection.__init__(self)
        self.base = base
        self.template_args = template_args

    def preprocess(self, data):
        data = '<%namespace name="m" file="/res/library.tmpl.html"/>\\\n' + data
        if '<%inherit' not in data:
            # note: topmost template should contain <%doc><%inherit file=""/></%doc>
            data = '<%inherit file="default.tmpl.html"/>\\\n' + data
        return data

    def get_template(self, uri):
        return Template(uri=uri, filename=self.convert_to_path(uri), lookup=self,
                module_filename=None, preprocessor=self.preprocess, **self.template_args)

    def make_template(self, uri, data):
        return Template(uri=uri, filename=self.convert_to_path(uri), text=data, lookup=self,
                module_filename=None, preprocessor=self.preprocess, **self.template_args)

    def filename_to_uri(self, uri, filename):
        raise NotImplementedError

    def adjust_uri(self, uri, relativeto):
        if uri.startswith('/'):
            return uri
        else:
            if relativeto is not None:
                return posixpath.join(posixpath.dirname(relativeto), uri)
            else:
                return '/' + uri

    def convert_to_path(self, uri):
        path = os.path.normpath(os.path.join(self.base, uri.lstrip('/')))
        if path.endswith('.tmpl.html'):
            # for *.tmpl.html, find the first matching path from parents
            dir, name = os.path.split(path)
            while dir not in ('', '/') and not os.access(path, os.R_OK):
                dir = os.path.split(dir)[0]
                path = os.path.join(dir, name)
        return path

def main(argv):
    try:
        opts, args = getopt.gnu_getopt(argv, 'c:o:b:', ['cache-dir=', 'output=', 'base='])
    except getopt.GetoptError, e:
        print >>sys.stderr, str(e)
        return 1

    outpath = None
    basepath = os.getcwd()
    for o, a in opts:
        if o in ('-c', '--cache-dir'):
            mearie.cache.CACHEDIR = a
        elif o in ('-o', '--output'):
            outpath = a
        elif o in ('-b', '--base'):
            basepath = a
        else:
            assert False

    rtsyms = [i for i in dir(mearie.runtime) if not i.startswith('_')]
    lookup = CustomLookup(base=basepath,
            input_encoding='utf-8', output_encoding='utf-8', format_exceptions=False,
            imports=['from mearie.runtime import %s' % ','.join(rtsyms)])
    tmpl = lookup.get_template(args[0])
    result = tmpl.render(topmost=tmpl).strip('\r\n')
    if outpath is None:
        sys.stdout.write(result)
    else:
        open(outpath, 'wb').write(result)

    return 0

if __name__ == '__main__':
    raise SystemExit(main(sys.argv[1:]))

