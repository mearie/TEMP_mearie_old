## vim: syn=mako
<%inherit file="mearie.tmpl.html"/>
<%! title = u'메아리' %>

웹사이트로서의 메아리는 꽤 특이한 축에 속합니다.


도메인들
========

제가 관리하고 있는 개인 도메인은 현재 두 개가 있으며, 이들과 다음 서브도메인들이 넓은 의미에서 메아리에 포함됩니다.

**`mearie.org` (메아리)**
:	바로 이 사이트며, 공식적인 자료와 프로젝트들을 담는 데 쓰입니다.
**[`j.mearie.org`](http://j.mearie.org/) (메아리 저널)**
:	메아리 저널은 블로그 비스무리한 곳으로 별다른 주제 없이 그 때 그 때 생각나는 글을 쓰는 용도로 쓰입니다.
**[`pub.mearie.org`](http://pub.mearie.org/) (메아리 [풉;](pub))**
:	"개인적인 백과사전"을 목표로 만들고 있는 위키로 저널보다 좀 더 구조화되어 있지만 시간에 구애받지 않는 글을 쓰는 용도로 쓰입니다.
**[`cosmic.mearie.org`](http://cosmic.mearie.org/) (코스믹메아리)**
:	`mearie.org`에 딸린 사이트로 비공식적인 자료와 프로젝트들을 담는 데 쓰입니다. 이 아래의 내용들은 기본적으로 맘대로 바뀔 수 있고 훨씬 실험적인 것들입니다.
**[`hg.mearie.org`](http://hg.mearie.org/) (머큐리얼 저장소) 및 [`svn.mearie.org`](http://svn.mearie.org/) (서브버전 저장소)**
:	[머큐리얼](http://mercurial.selenic.com/) 및 [서브버전](http://subversion.apache.org/)으로 돌아 가는 소스 코드 저장소입니다. 후자는 아직 전자로 이전하지 못한 프로젝트에만 쓰입니다. 일부 주요 프로젝트는 [비트버켓](http://bitbucket.org/lifthrasiir/)에도 미러링되고 있습니다.
**[`tokigun.net`](http://tokigun.net/)**
:	먼 옛날 "토끼군 작업실"이라 불리던 메아리의 전신입니다. 현재 이 도메인은 고유 링크를 보존하기 위한 용도로만 쓰입니다.


기술적인 얘기
=============

메아리를 돌리는 소프트웨어[^1]는 몇 가지 난감한 조건을 충족해야 했습니다.

[^1]: 옛날에 메아리 플로라고 불렀습니다만 지금은 이름이 없습니다.

* HTML을 직접 쓸 필요는 없지만 필요하면 쓸 수 있게 할 것. 쓰는 거야 문제가 없지만 나중에 고치기가 힘들어서...
* 기본적으로 정적일 것. 많은 소프트웨어가 지원하는 동적인 기능들은 쓸 일도 없고 보통 오버헤드만 늘어납니다.
* 캐시가 아닌 한 데이터베이스를 쓰지 말 것. 소프트웨어가 없어도 읽을 수는 있어야 합니다.
* 오프라인으로 관리 가능할 것. 어차피 제 넷북이 인터넷과 항상 연결되어 있는 것도 아니고, 긴 글을 [Vim](http://vim.org/)로 쓰기도 하기 때문에 필요합니다.
* 적절한 버전 관리 시스템(VCS), 특히 분산 버전 관리 시스템으로 관리 가능할 것.
* 다국어 환경을 지원할 것.
* 검색 엔진 친화적이면서도 간명한 URL을 지원할 것.
* 스크립팅 가능할 것.
* 가능한 한 적은 수의 자유 소프트웨어만으로 구성될 것.

최근 수년간 이들 조건을 충족하는 방법을 찾아 다녔으며, 현재 메아리가 사용하는 방법은 이들 조건을 반영합니다. 참고로 거의 모든 게시판, 블로그, CMS 따위는 위의 조건을 반도 충족하지 못 합니다. 강력한 대안으로 [werc](http://werc.cat-v.org/)가 떠올랐으나 완벽하진 않았습니다[^2].

[^2]: werc는 정적인 페이지라도 CGI를 써서 매 요청마다 새 프로세스를 만드는 게 안 좋았고, 그다지 잘 쓰이지 않는 plan9port를 요구하는 것도 문제였습니다. (plan9port가 큰 패키지는 아니지만 일부 리눅스 배포판에서 지원하질 않지요)

그래서, 현재 메아리를 돌리는 소프트웨어는 두 개의 [파이썬](http://python.org/) 스크립트, [Mako](http://makotemplates.org/) 템플릿 엔진, [Pandoc](http://johnmacfarlane.net/pandoc/), [ImageMagick](http://imagemagick.org/), [머큐리얼](http://mercurial.selenic.com/), 그리고 쌩 Makefile-_-로 구성되어 있습니다. 구체적으로:

1. 텍스트 파일(엄밀히는 [마크다운](http://daringfireball.net/projects/markdown/))을 작성한 뒤 머큐리얼 저장소에 추가합니다.
2. `make`가 웹사이트를 자동으로 생성합니다. 이 과정은 점진적으로도 가능합니다. (따라서 조금만 바뀌면 필요한 작업도 조금 뿐입니다)
	- 저장소가 변경된 게 확인되면 Makefile은 자기 자신을 재생성합니다. 고로 새로 추가된 파일도 자동으로 처리됩니다.
	- Makefile이 파이썬 스크립트를 써서 텍스트 파일을 HTML 파일로 변환합니다. 이 과정에서 Pandoc과 Mako가 쓰입니다.
	- Pandoc이 마크다운 문법을 변환합니다. 이 과정이 그렇게 빠르지 않은 관계로 캐싱을 사용하는데, 이게 꽤 빠른 덕택에 마크다운 문법이 메뉴를 만드는 등의 작업에도 쓰입니다.
	- Mako가 템플릿 작업을 수행하며 이 과정에서 컴파일 시간 스크립팅도 이루어집니다.
	- 이미지나 다른 자료들은 Mako로 만들어진 라이브러리 코드로 실시간으로 처리됩니다.
3. 웹서버가 컴파일된 페이지를 전송합니다.
	- 다국어 페이지들은 아파치의 [`mod_negotiation`](http://httpd.apache.org/docs/2.2/mod/mod_negotiation.html) 모듈로 처리됩니다. 따라서 <`blah.en.txt`>과 <`blah.ko.txt`> 파일을 만든 뒤 (<`.html`> 없이) <`blah`>라는 URL로 링크할 수도 있습니다.[^3]
	- 그거 말고는 모든 페이지는 정적이며 매우 효율적으로 전송됩니다.

[^3]: 다른 서버에도 비슷한 방법이 존재합니다. 이를테면 [lighttpd](http://lighttpd.net/)에서는 적절한 `mod_magnet` 스크립트를 쓸 수 있습니다.

좀 희한한 방법이지만 잘 돌아 갑니다. 이 모든 소스 코드와 웹사이트 원본 파일들은 [머큐리얼 저장소](http://hg.mearie.org/mearie.org/3.x/)에서 볼 수 있습니다. (저기 아래에도 링크되어 있음)

